#!/usr/bin/env node

const http = require('http');
const app = require('../app');

//todo add frontend example
app.get('/', (req, res) => {
  res.render('index', {
    title: 'Web Application'
  });
});

// simple requests logger
app.use((req, res, next) => {
  console.log('[HTTP]: '.concat(req.method, ' ', req.url, ' BY ', req.ip, ' via ', req.headers['user-agent']));
  next();
});

app.get('/ping', (req, res) => {
  res.set('Content-Type', 'text/html');
  res.send('<p>pong</p>');
});

// uploader routes
app.use('/api/images/', require('../uploader/index'));

app.use((req, res, next) => {
  next({
    statusCode: 404
  });
});

// error handler
app.use((err, req, res, next) => {
  if (err.statusCode === 404) {
    return res.sendStatus(404);
  }

  if (err.statusCode === 400 && err.type === 'entity.parse.failed') {
    return res.status(400).json({
      code: 400,
      message: 'Invalid JSON format'
    });
  }

  console.log(err.stack);
  return res.status(500).json({
    code: 500,
    message: 'Unhandled error'
  });
});

const env = 'development';
const port = 3030;
const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.log(bind + ' requires elevated privileges', 'error');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.log(bind + ' is already in use', 'error');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  console.log(`application has been started on ${env} env ${bind} \u2600`);
}
